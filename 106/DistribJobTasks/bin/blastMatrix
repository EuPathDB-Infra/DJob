#!@perl@


BEGIN {
  unshift(@INC,"/genomics/share/lib/perl");
#  unshift(@INC,"/home/brunkb/perldev");
}

use lib "$ENV{GUS_HOME}/lib/perl";
use CBIL::Bio::Blast::BlastAnal;
use CBIL::Util::Utils;
use strict;
use Getopt::Long;
use File::Basename;

open(L,">blastMatrix.log")  || die "Can't open blastMatrix.log for writing";
print L basename($0) . " ".join(' ',@ARGV)."\n";
close L;

my $debug = 0;

$| = 1;

my $program = 'blastn';
my $matLibrary = "doMatrix.lib";
my $tempfile = "seqTmp";

my $seqFile;
my $db;
my $maskRepeats;
my $blastBinDir = 'default';
my $pValCutoff = 1e-5;
my $lengthCutoff = 40;
my $percentCutoff = 92; 
my $endSlop = 15;

&GetOptions("db=s" => \$db,
            "seqFile=s" => \$seqFile, 
            "maskRepeats!" => \$maskRepeats,
            "pValCutoff=f" => \$pValCutoff,
            "lengthCutoff=i" => \$lengthCutoff,
            "percentCutoff=i" => \$percentCutoff,
            "endSlop=i" => \$endSlop,
	    "blastBinDir=s" => \$blastBinDir,
           );

die "usage:...\n" unless $program && $seqFile && $db;

##parameters for initial parse...lower than cutoffs so can detect repeats/chimeras easier...
my $parsePVal = $pValCutoff > 1e-5 ? $pValCutoff : 1e-5;
my $parseLength = int($lengthCutoff * 0.75);
my $parsePercent = int($percentCutoff * 0.95);

my $blastDir = getProgramDir($program);

$ENV{BLASTFILTER} = "$blastDir/filter";
$ENV{BLASTMAT} = "$blastDir/matrix";
$ENV{PATH} .= ":$blastDir";

open(CHIM, ">chimera.list") || die "Can't open chimera.list for writing";
select CHIM; $| = 1; select STDOUT;
open(CHECK, ">check.list") || die "Can't open check.list for writing";

open(OUT, ">blastMatrix.out") || die "Can't open blastMatrix.out for writing";
select OUT; $| = 1; select STDOUT;

open(F, "$seqFile") || die "Can't open seq file $seqFile";
my $tmpid = "";
my $countEntries = 0;
my $seq;
while(<F>){
  if(/^\>(\S+)/){  ##check to see that this is the accession!!
    &processEntry($tmpid,$seq) unless $tmpid eq "";
    $tmpid = $1;
    $seq = "";
  }else{
    $seq .= $_;
  }
}
&processEntry($tmpid,$seq) unless $tmpid eq ""; ##do the last one!!
close F;
close CHIM;
close CHECK;
close OUT;

unlink $tempfile;

sub processEntry {
    my($accession,$sequence) = @_;


    open (TEMPFILE, ">$tempfile") || die "Can't open $tempfile for writing";
    print TEMPFILE "\>$accession\n$sequence"; ##should already be formatted OK  
    close TEMPFILE;

    my $countRedo = 0;
    my $needToRepeat = 1;
    do {
	my $cmd = "$program $db $tempfile cpus=1 B=1000 -novalidctxok -noseqs N=-10 M=5  2> $tempfile.stderr";

	my @blastn_out = `$cmd`;
	my $status = $? >> 8;
	die "Failed with status $status executing $cmd" if $status;
	$countRedo++;
	foreach my $line (@blastn_out){
	    if ($line =~ /^Sequences producing/){
		$needToRepeat = 0;
		&analyzeBlast($accession,@blastn_out);
		last;
	    }
	}
    } while ($needToRepeat && $countRedo < 4);
}

sub analyzeBlast{
  my($accession,@blastn_out) = @_;
  my $blast = CBIL::Bio::Blast::BlastAnal->new($debug);
  $blast->parseBlast($parseLength,$parsePercent,$parsePVal,'(\S+)',\@blastn_out); ##parse with less stringent params
         ##to aid in detection of repeats...

  ##detect the repeats for use in getGoodMatch
  my @rep;
  @rep = $blast->detectRepeats($endSlop) if $maskRepeats;

  my $countGood = 0;
  my @neigh;
  foreach my $s ($blast->getSubjects()){ ##should make method in BlastAnal.pm
    if($s->getGoodMatch($lengthCutoff,$percentCutoff,$pValCutoff,\@rep) == 1){
      $countGood++; 
      push(@neigh,$s->getNeighborStats());
#      print "  \(",join(', ', $s->getSubjectStats()),"\)\n"; 
    }
  } 

  print OUT "\>$accession: \(",join(', ',@neigh),"\)\n";

  ##check to see if the query is a chimera...
  my($isChimera,$chim,$chimErr) = $blast->detectChimera($endSlop);
  if($isChimera == 1){
    print CHIM "\>$accession $chim\n$chimErr";
  }elsif($chim > 1){
    print CHECK "\>$accession $chim\n$chimErr";
  }
    
  ##now want to print sequence to another file if not subsumed
  if($blast->getCoveredBySubjects(15) == 0){ ## || scalar(@neigh) == 0){  
##has ends longer than 15 that aren't covered or there are no neighbors
    ##there was a problem with the human sequences...those with no neighbors did
    ##not get written to the doMatrix.lib file...
#    system("cat $tempfile >> $matLibrary");
  }
}


