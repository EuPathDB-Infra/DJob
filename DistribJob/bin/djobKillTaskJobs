#!/usr/bin/perl

use lib "$ENV{GUS_HOME}/lib/perl";

use strict;

my ($tasklog) = @ARGV;

usage() unless scalar(@ARGV) == 1;

open(F, $tasklog) || die "Can't open task log '$tasklog'\n";

my $nodeClass;
my $inputDir;
my @jobsToKill;

while(<F>) {

  # only do this the first time we see an input dir
  if (!$inputDir && /^inputdir = (\S+)/) {
    $inputDir = $1;
  }

  # only do this the first time we see nodeclass.  we should have input dir by now
  if (!$nodeClass && /nodeclass = (\S+)/) {
    die "Error: expected to find 'inputdir =' in log before 'nodeclass ='\n" unless $inputDir;
    $nodeClass = $1;
    my $nodePath = $nodeClass;
    $nodePath =~ s/::/\//g;       # work around perl 'require' weirdness
    require "$nodePath.pm";

    my $jobInfoFile = "$inputDir/distribjobJobInfo.txt";
    if (-e $jobInfoFile) {
      open(J, $jobInfoFile) || die "can't open job info file '$jobInfoFile'\n";
      my $infoString = <J>;
      close(J);
      my $controllerJobId = $nodeClass->getJobIdFromJobInfoString($infoString);
      push(@jobsToKill, $controllerJobId);
    }
  }
  push(@jobsToKill, $1) if (/\((\d+)(.pbs.scm)*\).*dispatching to node/);
}
close(F);

while(1) {
  my @batch = splice(@jobsToKill, 0, 100);
  my $cmd = $nodeClass->getKillJobCmd(join(" ", @batch));
  print STDERR "$cmd\n";
  system($cmd) && die "failed running $cmd\n$?\n";
  last unless scalar(@jobsToKill);
}


sub usage {
die "
Kill the cluster jobs running for a task.

Usage: djobKillTaskJobs task_log_file

Parses the log file to find the input/ dir and the running jobs.

If the input/ includes a distribjobJobInfo.txt file, uses the Node to parse it to find the job ID of the controller.
";
}
