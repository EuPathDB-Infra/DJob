#!@perl@

use strict;
use Getopt::Long;

my($queue,$procsPerNode,$help,$memPerNode);
my $pInit = 4;

&GetOptions("help|h!" => \$help, 
            "procsPerNode|ppn=i" => \$procsPerNode,
            "memoryPerNode|mpn=s" => \$memPerNode,
            "queue|q=s" => \$queue,
            "pInit|pi=i" => \$pInit,
            );

&usage() if $help;

my ($nodecount, $minutes, $controllerPropFile) = &parseArgs(@ARGV);


##need to write to a file so that user can cancel this job if fails for some reason
my $tmp = "cancelLiniacJob.$$";
my $cancelFile = "$ENV{HOME}/$tmp";
open(F,">$cancelFile") || die "couldn't open '$cancelFile'";
print F "#!/bin/sh\n\nqdel ";
close F;
system("chmod +x $cancelFile");

print "\nThe script to cancel all the jobs for this submit is $cancelFile\n\n";

my $cmd = "distribjob --numNodes $nodecount --runTime $minutes --propFile $controllerPropFile --parallelInit $pInit --fileName $cancelFile".($procsPerNode ? " --ppn $procsPerNode" : "").($memPerNode ? " --mpn $memPerNode" : "").($queue ? " --q $queue" : "");

print "\nRunning cmd:\n$cmd";

system($cmd);

open(F,">>$cancelFile");
print F "\n\n";
close F;
system("$cancelFile > /dev/null 2>&1");

unlink "$cancelFile";
$cancelFile =~ s/cancel/run/;
unlink "$cancelFile";

sub parseArgs {
    my ($nodecount, $minutes, $controllerPropFile,$ppn) = @ARGV;

    &usage unless ($nodecount && $controllerPropFile);

    &usage if ($nodecount <= 0 || $nodecount > 10000); 
    &usage if ($minutes < 0 || $minutes > 100000); 
    &usage unless $controllerPropFile =~ /^\//;

    die "controller properties file $controllerPropFile does not exist"
	unless -e $controllerPropFile;

    return ($nodecount, $minutes, $controllerPropFile, $ppn);
}

sub usage {

    print "usage: liniacsubmit nodecount minutes controllerPropFileFullPath --procsPerNode|ppn <num of procs / node [2]> --memoryPerNode|mpn <memory in GB / node [1.8]> --queue|q queue\n";
    exit(1);
}
