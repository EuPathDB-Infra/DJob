#!/usr/bin/perl

use strict;
use Getopt::Long;

my($blastProgram);

&GetOptions("blastProgram=s" => \$blastProgram);

die "you must provide --blastProgram <pgm>\n" unless $blastProgram;

# approach:  blast forks so that there are three processes running.
# it seems that when things are ok, at least two of the three are
# spending CPU time (the middle process seems to stay at 0).  it has
# been observed that in a bad blast, one of those two stops using CPU time. 
#
# so we test here to make sure that at least two are progressing across
# snapshots

my %previousSnapshot;

my $rpsBlast = $blastProgram =~ /rpsblast/;

while (1){
  my %currentSnapshot;

  # take snapshot
  my @procs = `ps -auxwww`;
  foreach my $p (@procs){
#pinney    7035  0.0  8.3 947612 172572 ?     S    16:34   0:00 /genomics/share/pkg/bio/ncbi-blast/current/rpsblast -d /scratch/user/pinney/All -i seqTmp -a 2 -e .1 -p F 
    #pspinney    9803 99.5  0.4 45732 8992 ?        R    16:21   0:08 /genomics/share/pkg/bio/wu-blast/current/blastx /scratch/user/pinney/
    if ($p =~ /^\w+\s+(\d+).*?(\d+:\d+)\s+$blastProgram/) {
      my $processId = $1;
      my $totalCPU = $2;
      $totalCPU =~ s/:/\./;
      #print STDERR "found one: $processId:  $totalCPU\n";
      $currentSnapshot{$processId} = $totalCPU;
    }
  }

  # compare with previous
  my $countInactiveProcesses = 0;
  foreach my $processId (sort keys(%currentSnapshot)) {
    my $prevCPU = $previousSnapshot{$processId};
    last unless defined $prevCPU;
    $countInactiveProcesses++ if $currentSnapshot{$processId} == $prevCPU;
  }

  # regular blast normally has an inactive process, so need more than one to be bad;  
  # rpsblast does not, so only need one inactive process to be bad 
  my $shouldKill = $rpsBlast? $countInactiveProcesses >= 1 : $countInactiveProcesses > 1;

  if ($shouldKill) {
    my $toKill = join(" ", sort(keys(%currentSnapshot)));
    my $cmd = "kill -9 $toKill";
    print STDERR "Killing bad blast jobs: '$cmd' \n";
    system($cmd) || "failed running $cmd with STDERR: '$!'";
  } else {
    %previousSnapshot = %currentSnapshot;
  }
  sleep 15;
}
