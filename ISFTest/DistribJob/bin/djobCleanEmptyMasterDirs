#!/usr/bin/perl

use strict;

my ($dataDir, $reportOnly) = @ARGV;
usage() unless $dataDir;

die "First argument '$dataDir' must be a directory in which to find master/ dirs" unless -d $dataDir;

print STDERR "\nSearching for master/ dirs inside of $dataDir\n\n";
my @dirs = `find $dataDir -name master`;

my $r;
$r = " (but won't because only reporting)" if $reportOnly;
print STDERR "Found these dirs to delete$r\n";

my $deleted = 0;
my @foundDirs;
foreach my $dir (@dirs) {
  chomp $dir;
  my $count = 0;
  if (-d "$dir/mainresult") {
    $count = `ls $dir/mainresult|wc -l`;
    chomp $count;
  }
  next if $count;   # only delete dirs which have non-zero number of files in mainresult
  push(@foundDirs, $dir);
  print STDERR "  $dir\n";
}

my $foundCount = scalar(@foundDirs);

exit(0) if $reportOnly;

print "\nYou are about to delete $foundCount master/ dirs.  Type 'yes' to confirm: ";
my $confirm = <STDIN>;
chomp $confirm;
die "You did not type yes\n" unless $confirm eq 'yes';

foreach my $f (@foundDirs) {
  my $cmd = "rm -r $f";
  print STDERR "$cmd\n";
  system($cmd) && die "Failed: $?\n";
  $deleted++;
}

print "\nDeleted $deleted dirs\n";

sub usage {

die "

Delete distribjob master/ dirs that are empty.  This is useful in a workflow context where there may be many systematic failures.  Directories that have an empty master/mainresult dir are deleted.

CAUTION:  do not run this command if any djob runs are in progress.   It could remove master/ dirs from them if they have not yet written to mainresult/

usage:  djobCleanEmptyMasterDirs data_dir [-r]

where:
   data_dir - a dir to start searching for master/ dirs
   -r       - a flag to report only, ie, show what will be deleted, but don't do the delete

";
}
