#!@perl@

## starts gfServer with cmd: gfServer -canStop start localhost port 
## checks status with gfServer status localhost port 
##every 10 seconds until 0 is returned

use strict;
use Getopt::Long;

my $path = 'default';
my($port,$dir,$trans);
&GetOptions('nodePort=i' => \$port,
            'binPath=s' => \$path,
            'trans!' => \$trans,
	    'targetDir=s' => \$dir);

($path && $port && $dir) ||
	die "Usage:startGfServer --nodePort --binPath <gfServer/gfClient path> --targetDir --trans";  
$ENV{PATH} = "$path:$ENV{PATH}" unless $path eq 'default';

my $translate = $trans ? "-trans" : "";

my $fuser = -e "/sbin/fuser" ? "/sbin/fuser" : "/usr/sbin/fuser";

die "fuser command not found\n" unless $fuser;

chdir("$dir");

##first find an available port
#my $ctp = 0;
#while(!&testPort($port)){
#  $ctp++;
#  die "Unable to find open port\n" if $ctp > 10;
#  $port = int(rand(3000)) + 8000;
#}

my $hostname = `hostname`;
chomp $hostname;

if(&testPort($port)){ ##returns true if port is not being used
  die "port $port in use by another process, can't start gfServer\n";
}

my $cmd = "gfServer -canStop -maxAaSize=15000 $translate start localhost $port *.2bit > /dev/null 2>&1 &";

print STDERR "\n$cmd\n\n";

system($cmd);

system("gfServer status localhost $port > /dev/null 2>&1");

my $ct = 0;
while($?){
  $ct++;
  die "Unable to create gfServer on port $port\n" if $ct > 120;  ##tries for 10 minutes
  sleep 5;
  system("gfServer status localhost $port > /dev/null 2>&1");
}

print "gfServer started on $hostname:$port\n";

sub testPort {
  my $port = shift;
  my $tcmd = "$fuser $port/tcp > /dev/null 2>&1";
#  print STDERR "testPort: $tcmd\n";
  system($tcmd);
  return $? ? 0 : 1;
}
